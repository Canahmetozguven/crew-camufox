[project]
name = "crew-camufox"
version = "2.0.0"
description = "Advanced Multi-Agent Research System with Enhanced Capabilities"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Crew-Camufox Team", email = "contact@crew-camufox.dev" }
]
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Text Processing :: Linguistic"
]

dependencies = [
    "crewai>=0.83.5",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.0.0",
    "ollama>=0.3.0",
    "camoufox>=0.4.0",
    "beautifulsoup4>=4.12.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "colorama>=0.4.6",
    "rich>=13.7.0",
    "tenacity>=8.2.0",
    "psutil>=5.9.0",
    # Performance & Async
    "aiohttp>=3.9.0",
    "aiofiles>=23.0.0",
    "asyncio-throttle>=1.0.0",
    # Optional caching (Redis)
    "redis[hiredis]>=5.0.0;extra=='redis'",
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.16.4",
    "aiosqlite>=0.21.0",
    "numpy>=2.3.1",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
redis = [
    "redis[hiredis]>=5.0.0",
]
postgres = [
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.13.0",
]
all = [
    "crew-camufox[dev,redis,postgres]",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0"
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]

[project.urls]
Homepage = "https://github.com/your-username/crew-camufox"
Documentation = "https://your-username.github.io/crew-camufox"
Repository = "https://github.com/your-username/crew-camufox"
Issues = "https://github.com/your-username/crew-camufox/issues"
Changelog = "https://github.com/your-username/crew-camufox/blob/main/CHANGELOG.md"

[project.scripts]
crew-camufox = "src.main:main"
crew-research = "src.cli:cli_main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "camoufox.*",
    "crewai.*",
    "langchain_ollama.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "performance: marks tests as performance tests",
    "concurrency: marks tests as concurrency tests",
    "scalability: marks tests as scalability tests",
    "stress: marks tests as stress tests",
    "reliability: marks tests as reliability tests",
    "slow: marks tests as slow running",
    "requires_ollama: marks tests that need Ollama service running",
    "requires_internet: marks tests that need internet connection",
    "requires_database: marks tests that require database setup",
    "requires_redis: marks tests that require Redis service",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E266", "E501", "W503"]
max-complexity = 10
select = ["B", "C", "E", "F", "W", "T4", "B9"]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]
